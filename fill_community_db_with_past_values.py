import os
import csv
from datetime import datetime
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

# Import your Base and CommunitySize model
from models import Base, CommunitySize

def parse_int(value):
    """Convert a string to int, treating 'N/A' or empty as 0 (since model is nullable=False)."""
    if not value or value.upper() == "N/A":
        return 0
    return int(value)

def main():
    # 1) Locate the same SQLite DB path as in create_community_size_db.py
    base_dir = os.path.dirname(__file__)
    #data_dir = os.path.join(base_dir, "..", "data")#
    base_dir=data_dir
    os.makedirs(data_dir, exist_ok=True)

    db_path = os.path.join(data_dir, "budget_tracker.db")
    db_path = os.path.abspath(db_path)
    db_url = f"sqlite:///{db_path}"

    # 2) Create engine and session
    engine = create_engine(db_url, echo=True)
    Session = sessionmaker(bind=engine)
    session = Session()

    # 3) Read from CSV file generated by your interpolation script
    csv_filename = "interpolated_data.csv"
    with open(csv_filename, "r", encoding="utf-8") as csv_file:
        reader = csv.DictReader(csv_file)  
        # Expecting columns like: Date, discord, reddit, tg, x (plus any others)

        for row in reader:
            # Parse date (YYYY-MM-DD) â†’ value_date
            row_date = datetime.strptime(row["Date"], "%Y-%m-%d")

            # parse each metric
            discord_val = parse_int(row.get("discord"))
            reddit_val  = parse_int(row.get("reddit"))
            tg_val      = parse_int(row.get("tg"))
            # 'x' is not in the model, so ignore it
            # 'twitter' not in CSV, so let's default to 0

            # 4) Create a CommunitySize object
            #    We must also provide fill_date, price_in_usdt, and marcetcap
            new_record = CommunitySize(
                value_date=row_date,        # from CSV
                fill_date=datetime.now(),   # 'today' as fill date

                # Our model columns
                twitter=0,                 # not in CSV, so default 0
                reddit=reddit_val,
                discord=discord_val,
                telegram=tg_val,

                price_in_usdt=0.0,  # no data in CSV, so default
                marcetcap=0.0       # no data in CSV, so default
            )

            # 5) Add to session
            session.add(new_record)

    # 6) Commit once after all rows are processed
    session.commit()
    session.close()

    print(f"Successfully imported data from '{csv_filename}' into 'community_size' table.")

if __name__ == "__main__":
    main()
